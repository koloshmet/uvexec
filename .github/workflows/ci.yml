# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CI

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ "main" ]

jobs:
  clang:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

      matrix:
        preset: [ ci-debug-clang, ci-asan, ci-tsan ]

    steps:
      - uses: actions/checkout@v3

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build-ci" >> "$GITHUB_OUTPUT"

      - name: Install clang 15
        run: bash -c "$(wget -O - https://apt.llvm.org/llvm.sh) 15 && apt install libc++-15-dev"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake --preset ${{ matrix.preset }} -S ${{ github.workspace }}

      - name: Build
        working-directory: ${{ github.workspace }}
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build --preset ${{ matrix.preset }}

      - name: Test
        working-directory: ${{ github.workspace }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --preset ${{ matrix.preset }}

  gcc:
    needs: clang
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

      matrix:
        preset: [ci-debug-unix, ci-release-unix]

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build-ci" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: cmake --preset ${{ matrix.preset }} -S ${{ github.workspace }}

    - name: Build
      working-directory: ${{ github.workspace }}
      run: cmake --build --preset ${{ matrix.preset }}

    - name: Test
      working-directory: ${{ github.workspace }}
      run: ctest --preset ${{ matrix.preset }}

  msvc:
    needs: clang
    runs-on: windows-latest

    strategy:
      fail-fast: false

      matrix:
        preset: [ ci-debug-win, ci-release-win ]

    steps:
      - uses: actions/checkout@v3

      - name: Set reusable strings
        id: strings
        shell: bash
        run: echo "build-output-dir=${{ github.workspace }}/build-ci" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: cmake --preset ${{ matrix.preset }} -S ${{ github.workspace }}

      - name: Build
        working-directory: ${{ github.workspace }}
        run: cmake --build --preset ${{ matrix.preset }}

      - name: Test
        working-directory: ${{ github.workspace }}
        run: ctest --preset ${{ matrix.preset }}
